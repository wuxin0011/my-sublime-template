<snippet>
	<content><![CDATA[

import java.io.*;
import java.util.*;


public class ${TM_FILENAME/(\w+)\.java/\1/g} {


    static int MAXN = (int) 1e6 + 1;
    static int MOD7 = (int) 1e9 + 7,MOD8 =  80112002,MOD9 = 998244353,inf = Integer.MAX_VALUE;
    static int MOD  =  (int) MOD9;

    public static void solve() {

    }

    public static void main(String[] args) {
        int t = 1;
        // t = read();
        while (t > 0) {
            solve();
            t--;
        }
        close();
    }


    public static void dbg(Object ...args) {
        boolean isDebug = true;
        if(!isDebug){
            return;
        }
        String argsStringIndex = "";
        // argsStringIndex += "{ ";
        // for(int i = 0;i < args.length;i++) {
        //     argsStringIndex += i;
        //     if(i != args.length-1) {
        //         argsStringIndex +=",";
        //     }
        // }
        // argsStringIndex += " }";
        String str = "";
        str += "{ ";
        for(int i = 0 ;i < args.length;i++) {
            str += String.valueOf(args[i]);
            if(i < args.length - 1) {
                str += " ,";
            }
        }
        str += " }";
        pln(argsStringIndex + (argsStringIndex.length() != 0 ? " = " : "") + str);
    }
    



    public static long mins(long ...args){
        long ans = args[0];
        for(long x : args) {
            if(x < ans) ans = x;
        }
        return ans;
    }

    public static int mins(int ...args){
        int ans = args[0];
        for(int x : args) {
            if(x < ans) ans = x;
        }
        return ans;
    }

    public static int maxs(int ...args){
        int ans = args[0];
        for(int x : args) {
            if(x > ans) ans = x;
        }
        return ans;
    }

    public static long maxs(long ...args){
        long ans = args[0];
        for(long x : args) {
            if(x > ans) ans = x;
        }
        return ans;
    }



    public static int lowerBound(int[] array, int size, int target) {
        int l = 0, r = size - 1;
        while (l <= r) {
            int mid = l + ((r - l) >> 1);
            if (array[mid] >= target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    public static long qpow(long x, int n, int mod) {
        long ans = 1L;
        while (n > 0) {
            if ((n & 1) == 1) {
                ans = ans * x % mod;
            }
            n >>= 1;
            x = x * x % mod;
        }
        return ans;
    }

    public static long gcd(long x, long y) {
        while (y != 0 && x != 0) {
            long temp = x % y;
            x = y;
            y = temp;
        }
        return x;
    }

    static void printArray(int[] arr, int st, int end) {
        print("[");
        for (int i = st; i < end; i++) {
            print(arr[i]);
            if (i != end - 1) {
                print(", ");
            }
        }
        print("]\n");
    }

    static void printArray(long[] arr, int st, int end) {
        print("[");
        for (int i = st; i < end; i++) {
            print(arr[i]);
            if (i != end - 1) {
                print(", ");
            }
        }
        print("]\n");
    }

    static void printArray(int[][] arr, int rowStart, int rowEnd, int colStart, int colEnd) {
        print("[\n");
        for (int i = rowStart; i < rowEnd; i++) {
            printArray(arr[i], colStart, colEnd);
        }
        print("]\n");
    }

    public static final String DEFAULT_FILE_NAME = "../in/${TM_FILENAME/(\w+)\.java/\1/g}/in.txt"; // default read file
    public static final boolean DELETE_CLOSE = false; // auto close ?
    public static InputStream br = null;
    public static PrintWriter ptr = null;

    static {
        try {
            File file = new File(DEFAULT_FILE_NAME);
            br = file.exists() ? new BufferedInputStream(new FileInputStream(file)) : br;
        } catch (Exception e) {

        }
        initIO(false);
    }

    public static void initIO(boolean flushIO) {
        br = flushIO || br == null ? new BufferedInputStream(System.in) : br;
        ptr = flushIO || ptr == null ? new PrintWriter(new BufferedOutputStream(System.out)) : ptr;
    }

    public static int read() {
        long x = readLong();
        if (x > Integer.MAX_VALUE || x < Integer.MIN_VALUE) {
            throw new RuntimeException("overflow int type");
        }
        return (int) x;
    }

    static long readLong() {
        try {
            int c = br.read();
            int f = 1;
            long x = 0;
            while (c < '0' || c > '9') {
                if (c == '-') {
                    f = -1;
                }
                c = br.read();
            }
            while (c >= '0' && c <= '9') {
                x = x * 10 + (c - '0');
                c = br.read();
            }
            return x * f;
        } catch (IOException e) {
            System.err.println("read Error,place check your input is number !");
            return -1;
        }
    }

    public static void pln(Object obj) {
        print(obj);
        print("\n");
    }

    public static void print(Object obj) {
        ptr.print(obj);
    }

    public static void printf(String format,Object ...obj) {
        ptr.printf(format,obj);
    }

    public static void close() {
        try {
            if (br != null)
                br.close();

            if (ptr != null) {
                ptr.flush();
                ptr.close();
            }
            if (DELETE_CLOSE) {
                br = null;
                ptr = null;
            }
        } catch (Exception ignore) {

        }
    }

}


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fio</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.java</scope>
</snippet>
