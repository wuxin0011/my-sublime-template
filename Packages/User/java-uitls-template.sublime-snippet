<snippet>
	<content><![CDATA[
    public static class Utils {
        static int[][] dirs4_x = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
        static int[][] dirs4_y = {{-1,-1}, {-1,1}, {1,-1}, {1,1}};
        static int[][] dirs8 = {
                {-1, -1}, {-1, 0}, {-1, 1},
                {0, -1},/*{0,0}*/ {0, 1},
                {1, -1}, {1, 0}, {1, 1},
        };

        static int[][] dirs = dirs8;

        static void test_dirs(int i,int j,int m,int n) {

            for(int[] dir : dirs) {
                int x = i + dir[0],y = j + dir[1];
                if(0 <= x && x < m && 0 <= y && y < n) {
                    // handler
                }
            }
        }


        public  void dbg(Object ...args) {
            boolean isDebug = true;
            if(!isDebug){
                return;
            }
            String argsStringIndex = "";
            // argsStringIndex += "{ ";
            // for(int i = 0;i < args.length;i++) {
            //     argsStringIndex += i;
            //     if(i != args.length-1) {
            //         argsStringIndex +=",";
            //     }
            // }
            // argsStringIndex += " }";
            String str = "";
            str += "{ ";
            for(int i = 0 ;i < args.length;i++) {
                str += String.valueOf(args[i]);
                if(i < args.length - 1) {
                    str += " ,";
                }
            }
            str += " }";
            System.out.println(argsStringIndex + (argsStringIndex.length() != 0 ? " = " : "") + str);
        }



        public static long mins(long ...args){
            long ans = args[0];
            for(long x : args)if(x < ans) ans = x;
            return ans;
        }

        public static int mins(int ...args){
            int ans = args[0];
            for(int x : args)if(x < ans) ans = x;
            return ans;
        }

        public static int maxs(int ...args){
            int ans = args[0];
            for(int x : args) if(x > ans) ans = x;
            return ans;
        }

        public static long maxs(long ...args){
            long ans = args[0];
            for(long x : args) if(x > ans) ans = x;
            return ans;
        }

        public static long qpow(long x, int n, int mod) {
            long ans = 1L;
            while (n > 0) {
                if ((n & 1) == 1) {
                    ans = ans * x % mod;
                }
                n >>= 1;
                x = x * x % mod;
            }
            return ans;
        }

        public static long gcd(long x, long y) {
            return y == 0 ? x : gcd(y,x % y);
        }


        // 数组gcd
        public static long gcd(int[] arr) {
            int x = arr[0];
            for(int i = 1;i < arr.length;i++){
                x = (int)(gcd(x,arr[i]));
            }
            return x;
        }
        public static long gcd(long[] arr) {
            long x = arr[0];
            for(int i = 1;i < arr.length;i++){
                x = gcd(x,arr[i]);
            }
            return x;
        }
        public static long lcm(long x, long y) {
            return x / gcd(x,y) * y;
        }
        // 数组gcd
        public static long lcm(int[] arr) {
            int x = arr[0];
            for(int i = 1;i < arr.length;i++) x = (int)(lcm(x,arr[i]));
            return x;
        }
        public static long lcm(long[] arr) {
            long x = arr[0];
            for(int i = 1;i < arr.length;i++) x = lcm(x,arr[i]);
            return x;
        }


        public static boolean isPalindrome(long x) {
            if (x < 0) return false;
            long off = 1;
            while(x / off >= 10) {
                off *= 10;
            }
            while( x > 0) {
                if( x % 10 != x / off ) {
                    return false;
                }
                x = (x % off) / 10;
                off /= 100;
            }
            return true;
        }
        // 原理是每次取的原来种子的最右侧数字 然后消除这一个数字
        // 输入一个种子构造回文数
        // true表示奇回文
        public static long builderPalindromeNumber(long x,boolean odd) {
            long y = x;
            if(odd) x /= 10;
            while(x > 0) {
                y = y * 10 + x % 10;
                x /= 10;
            }
            return y;
        }

        // 判断元音字符(含大写）
        public static boolean isVol(char c) {
            if ('A' <= c && c <= 'Z') {
                c = (char) (c - 'A' + 'a');
            }
            return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
        }


        // 以对齐方式打印int[] 的中二进制数据
        public static String printBinaryToString(int...args) {
            int mx = 0;
            for(int x : args) if(mx < x) mx = x;
            // List<String> list = new ArrayList<>();
            int n = 0;
            for(int i = 0,v = 0;i < 32 && v < mx;i++) {
                v |= (1 << i);
                n++;
            }
            String S = "";
            for(int x : args) {
                String s = "";
                for(int i = 0;i < n;i++) {
                    s = (x >> i & 1) + s;
                }
                S += s;
                S += "\n";
            }
            System.out.println(S);
            return S;
        }
        public static String printBinaryToString(List<Integer> ls) {
            int[] array = ls.stream().mapToInt(i -> i).toArray();
            return printBinaryToString(array);
        }

        // 打印矩阵对角线
        public static void printMatrixSingle(int[][] g) {
            int m = g.length,n = g[0].length;
            for(int i = 0;i < m;i++) {
                for(int j = 0; j< n;j++) {
                    System.out.printf("(%s,%s) ",i,j);
                }
                System.out.println();
            }
            // print(\\)
            for(int d = m - 1;d >= 0;d--) {
                int i = d;
                int j = 0;
                while( i < m && j < n) {
                    System.out.printf("g[%s][%s]=%s ",i,j,g[i][j]);
                    i++;
                    j++;
                }
                System.out.println("");
            }

            for(int d = 1;d < n;d++) {
                int i = 0;
                int j = d;
                while( i < m && j < n) {
                    System.out.printf("g[%s][%s]=%s ",i,j,g[i][j]);
                    i++;
                    j++;
                }
                System.out.println("");
            }



            // print(//)
            // for(int d = 0;d  < n ;d++) {
            //     int i = 0;
            //     int j = d;
            //     while( i < m && j >= 0) {
            //         System.out.printf("g[%s][%s]=%s ",i,j,g[i][j]);
            //      i++;
            //      j--;
            //     }
            //     System.out.println("");
            // }

            // for(int d = 1 ;d  < m;d++) {
            //     int i = d;
            //     int j = n - 1;
            //     while( i < m && j >= 0) {
            //         System.out.printf("g[%s][%s]=%s ",i,j,g[i][j]);
            //      i++;
            //      j--;
            //     }
            //     System.out.println("");
            // }
        }


        public static int lowerBound(int[] array, int size, int target) {
            int l = 0, r = size - 1;
            while (l <= r) {
                int mid = l + ((r - l) >> 1);
                if (array[mid] >= target) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            return l;
        }
        public static int lowerBound(long[] array, int size, long target) {
            int l = 0, r = size - 1;
            while (l <= r) {
                int mid = l + ((r - l) >> 1);
                if (array[mid] >= target) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            return l;
        }
        public static int lowerBound(List<Integer> array, int size, int target) {
            int l = 0, r = size - 1;
            while (l <= r) {
                int mid = l + ((r - l) >> 1);
                if (array.get(mid) >= target) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            return l;
        }
    }
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fastutil</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.java</scope>
</snippet>
