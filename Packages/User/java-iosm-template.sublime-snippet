<snippet>
	<content><![CDATA[

    import java.util.*;
    import java.io.*;


    public class ${TM_FILENAME/(\w+)\.java/\1/g} {

        public static class MainClass {


            void solve(){
                // todo...
            }

                
        }


        static IO io;

        public static void main(String[] args) {
            io = new IO();
            int t = 1;
            // t = io.read();
            for(;t > 0;t--) {
                new MainClass().solve();
            }
            io.close();
        }


        public static class IO {
            static int MAXN = (int) 1e6 + 1;

            public static final String DEFAULT_FILE_NAME = "../in/${TM_FILENAME/(\w+)\.java/\1/g}/in.txt"; // default read file
            public static final boolean DELETE_CLOSE = false; // auto close ?
            public  BufferedInputStream br = null;
            public  PrintWriter ptr = null;
            public  boolean splitDOT = true; // if string contains ',' ,need split ?,default true


            {
                try {
                    File file = new File(DEFAULT_FILE_NAME);
                    br = file.exists() ? new BufferedInputStream(new FileInputStream(file)) : br;
                } catch (Exception ignored) {

                }
                initIO(false);
            }

            public  void initIO(boolean flushIO) {
                br = flushIO || br == null ? new BufferedInputStream(System.in) : br;
                ptr = flushIO || ptr == null ? new PrintWriter(new BufferedOutputStream(System.out)) : ptr;
            }

            public  int read() {
                long x = readLong();
                if (x > Integer.MAX_VALUE || x < Integer.MIN_VALUE) {
                    throw new RuntimeException("overflow int type");
                }
                return (int) x;
            }

            public long readLong() {
                try {
                    int c = br.read();
                    int f = 1;
                    long x = 0;
                    while (c < '0' || c > '9') {
                        if (c == '-') {
                            f = -1;
                        }
                        c = br.read();
                    }
                    while (c >= '0' && c <= '9') {
                        x = x * 10 + (c - '0');
                        c = br.read();
                    }
                    return x * f;
                } catch (IOException e) {
                    System.err.println("read Error,place check your input is number !");
                    return -1;
                }
            }


            boolean isDebug = true;

            public  void dbg(Object ...args) {
                if(!isDebug){
                    return;
                }
                String argsStringIndex = "";
                // argsStringIndex += "{ ";
                // for(int i = 0;i < args.length;i++) {
                //     argsStringIndex += i;
                //     if(i != args.length-1) {
                //         argsStringIndex +=",";
                //     }
                // }
                // argsStringIndex += " }";
                String str = "";
                str += "{ ";
                for(int i = 0 ;i < args.length;i++) {
                    str += String.valueOf(args[i]);
                    if(i < args.length - 1) {
                        str += " ,";
                    }
                }
                str += " }";
                pln(argsStringIndex + (argsStringIndex.length() != 0 ? " = " : "") + str);
            }



            public  void pln(Object obj) {
                print(obj);
                print("\n");
            }

            public  void print(Object obj) {
                ptr.print(obj);
            }

            public  void printf(String format,Object ...obj) {
                ptr.printf(format,obj);
            }


            public  void close() {
                try {
                    if (br != null)
                        br.close();

                    if (ptr != null) {
                        ptr.flush();
                        ptr.close();
                    }
                    if (DELETE_CLOSE) {
                        br = null;
                        ptr = null;
                    }
                } catch (Exception ignore) {

                }
            }
        }
    }

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>iosm</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.java</scope>
</snippet>
